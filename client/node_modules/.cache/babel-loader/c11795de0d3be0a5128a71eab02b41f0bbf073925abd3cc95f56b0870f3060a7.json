{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useWebSocket = (url, username) => {\n  _s();\n  const [ws, setWs] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState('lobby');\n  const [challengeStatus, setChallengeStatus] = useState(null);\n  useEffect(() => {\n    const socket = new WebSocket(url);\n    socket.onopen = () => {\n      console.log('WebSocket connected');\n      socket.send(JSON.stringify({\n        type: 'setUsername',\n        username\n      }));\n    };\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'playerList') {\n        setPlayers(data.players);\n      } else if (data.type === 'chatMessage' && data.room === currentRoom) {\n        // update messages only if the message is for the current room\n        setMessages(prevMessages => [...prevMessages, `${data.username}: ${data.message}`]);\n      } else if (data.type === 'challengeReceived') {\n        setChallengeStatus({\n          from: data.from,\n          to: data.to,\n          status: 'pending' // 'pending' until accepted or declined\n        });\n      } else if (data.type === 'challengeResponse') {\n        // handle challenge response (accepted or declined)\n        if (data.response === 'accept') {\n          console.log('Challenge accepted');\n        } else {\n          console.log('Challenge declined');\n        }\n        setChallengeStatus(null);\n      }\n    };\n    socket.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n    setWs(socket);\n    return () => {\n      socket.close();\n    };\n  }, [url, username, currentRoom]);\n  const sendMessage = message => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      const messageData = {\n        type: 'chatMessage',\n        room: currentRoom,\n        message: message,\n        username: username\n      };\n      ws.send(JSON.stringify(messageData));\n    }\n  };\n  const sendChallenge = challengedPlayer => {\n    const challengeData = {\n      type: 'sendChallenge',\n      challengedPlayer,\n      from: username\n    };\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(challengeData));\n    }\n  };\n  const respondToChallenge = (response, challenger) => {\n    const responseData = {\n      type: 'challengeResponse',\n      response,\n      challenger,\n      to: username\n    };\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(responseData));\n    }\n  };\n  return {\n    players,\n    messages,\n    sendMessage,\n    sendChallenge,\n    respondToChallenge,\n    setCurrentRoom\n  };\n};\n_s(useWebSocket, \"sbFUILHUDrQAb5zjEj60I75g/r4=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useState","useWebSocket","url","username","_s","ws","setWs","players","setPlayers","messages","setMessages","currentRoom","setCurrentRoom","challengeStatus","setChallengeStatus","socket","WebSocket","onopen","console","log","send","JSON","stringify","type","onmessage","event","data","parse","room","prevMessages","message","from","to","status","response","onclose","close","sendMessage","readyState","OPEN","messageData","sendChallenge","challengedPlayer","challengeData","respondToChallenge","challenger","responseData"],"sources":["/Users/sophiacastiglione/Desktop/iste442/dots-and-boxes/client/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useWebSocket = (url, username) => {\n    const [ws, setWs] = useState(null);\n    const [players, setPlayers] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [currentRoom, setCurrentRoom] = useState('lobby'); \n    const [challengeStatus, setChallengeStatus] = useState(null);\n\n    useEffect(() => {\n        const socket = new WebSocket(url);\n\n        socket.onopen = () => {\n            console.log('WebSocket connected');\n            socket.send(JSON.stringify({ type: 'setUsername', username }));\n        };\n\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            if (data.type === 'playerList') {\n                setPlayers(data.players);\n            } else if (data.type === 'chatMessage' && data.room === currentRoom) {\n                // update messages only if the message is for the current room\n                setMessages((prevMessages) => [...prevMessages, `${data.username}: ${data.message}`]);\n            } else if (data.type === 'challengeReceived') {\n                setChallengeStatus({\n                    from: data.from,\n                    to: data.to,\n                    status: 'pending',  // 'pending' until accepted or declined\n                });\n            } else if (data.type === 'challengeResponse') {\n                // handle challenge response (accepted or declined)\n                if (data.response === 'accept') {\n                    console.log('Challenge accepted');\n                } else {\n                    console.log('Challenge declined');\n                }\n                setChallengeStatus(null);\n            }\n        };\n\n        socket.onclose = () => {\n            console.log('WebSocket disconnected');\n        };\n\n        setWs(socket);\n\n        return () => {\n            socket.close();\n        };\n    }, [url, username, currentRoom]);\n\n    const sendMessage = (message) => {\n        if (ws && ws.readyState === WebSocket.OPEN) {\n            const messageData = {\n                type: 'chatMessage',\n                room: currentRoom, \n                message: message,\n                username: username\n            };\n            ws.send(JSON.stringify(messageData)); \n        }\n    };\n\n    const sendChallenge = (challengedPlayer) => {\n        const challengeData = {\n            type: 'sendChallenge',\n            challengedPlayer,\n            from: username\n        };\n        if (ws && ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify(challengeData)); \n        }\n    };\n\n    const respondToChallenge = (response, challenger) => {\n        const responseData = {\n            type: 'challengeResponse',\n            response,\n            challenger,\n            to: username\n        };\n        if (ws && ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify(responseData)); \n        }\n    };\n\n    return { players, messages, sendMessage, sendChallenge, respondToChallenge, setCurrentRoom };\n};\n\nexport default useWebSocket;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}