{"ast":null,"code":"var _jsxFileName = \"/Users/sophiacastiglione/Desktop/iste442/dotsandboxes/client/src/components/gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const gridSize = 5;\n  const boxSize = 100;\n  const padding = 20;\n  const [currentPlayer, setCurrentPlayer] = useState(1); // 1 or 2\n  const [playerScores, setPlayerScores] = useState({\n    1: 0,\n    2: 0\n  });\n  const playerColors = {\n    1: \"blue\",\n    2: \"green\"\n  };\n  const [lines, setLines] = useState({\n    vertical: Array(gridSize).fill(null).map(() => Array(gridSize + 1).fill(null)),\n    horizontal: Array(gridSize + 1).fill(null).map(() => Array(gridSize).fill(null))\n  });\n  const [completedBoxes, setCompletedBoxes] = useState(Array(gridSize - 1).fill(null).map(() => Array(gridSize - 1).fill(null)));\n  const handleClick = (type, row, col) => {\n    const newLines = {\n      vertical: lines.vertical.map(row => [...row]),\n      horizontal: lines.horizontal.map(row => [...row])\n    };\n\n    // assign color\n    newLines[type][row][col] = playerColors[currentPlayer];\n    setLines(newLines);\n    const completedBoxesAfterMove = checkCompletedBoxes(newLines);\n\n    // change turn if no box is completed after move\n    if (!completedBoxesAfterMove) {\n      setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n    }\n  };\n  const checkCompletedBoxes = newLines => {\n    const newCompletedBoxes = completedBoxes.map(row => [...row]);\n    let boxesCompletedThisTurn = 0;\n    for (let row = 0; row < gridSize - 1; row++) {\n      for (let col = 0; col < gridSize - 1; col++) {\n        // check if all four sides of the box are filled\n        const topLine = newLines.horizontal[row][col];\n        const bottomLine = newLines.horizontal[row + 1][col];\n        const leftLine = newLines.vertical[row][col];\n        const rightLine = newLines.vertical[row][col + 1];\n        if (topLine && bottomLine && leftLine && rightLine && !newCompletedBoxes[row][col]) {\n          newCompletedBoxes[row][col] = currentPlayer; // mark box with current player number\n          boxesCompletedThisTurn++;\n        }\n      }\n    }\n    setCompletedBoxes(newCompletedBoxes);\n\n    // increment the score of the current player if needed\n    if (boxesCompletedThisTurn > 0) {\n      setPlayerScores({\n        ...playerScores,\n        [currentPlayer]: playerScores[currentPlayer] + boxesCompletedThisTurn\n      });\n      return true; // return true if any box was completed\n    }\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `Player ${currentPlayer}'s Turn`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: `Player 1: ${playerScores[1]} | Player 2: ${playerScores[2]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: gridSize * boxSize + 2 * padding,\n      height: gridSize * boxSize + 2 * padding,\n      style: {\n        border: \"1px solid black\"\n      },\n      children: [Array.from({\n        length: gridSize + 1\n      }).map((_, row) => Array.from({\n        length: gridSize + 1\n      }).map((_, col) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: col * boxSize + padding,\n        cy: row * boxSize + padding,\n        r: \"3\",\n        fill: \"black\"\n      }, `dot-${row}-${col}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this))), lines.horizontal.map((row, rowIndex) => row.map((color, colIndex) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: colIndex * boxSize + padding,\n        y1: rowIndex * boxSize + padding,\n        x2: (colIndex + 1) * boxSize + padding,\n        y2: rowIndex * boxSize + padding,\n        stroke: color || \"transparent\",\n        strokeWidth: \"5\",\n        onMouseEnter: e => e.target.setAttribute(\"stroke\", \"gray\"),\n        onMouseLeave: e => e.target.setAttribute(\"stroke\", color || \"transparent\"),\n        onClick: () => handleClick(\"horizontal\", rowIndex, colIndex)\n      }, `hline-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this))), lines.vertical.map((row, rowIndex) => row.map((color, colIndex) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: colIndex * boxSize + padding,\n        y1: rowIndex * boxSize + padding,\n        x2: colIndex * boxSize + padding,\n        y2: (rowIndex + 1) * boxSize + padding,\n        stroke: color || \"transparent\",\n        strokeWidth: \"5\",\n        onMouseEnter: e => e.target.setAttribute(\"stroke\", \"gray\"),\n        onMouseLeave: e => e.target.setAttribute(\"stroke\", color || \"transparent\"),\n        onClick: () => handleClick(\"vertical\", rowIndex, colIndex)\n      }, `vline-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }, this))), completedBoxes.map((row, rowIndex) => row.map((player, colIndex) => player ? /*#__PURE__*/_jsxDEV(\"text\", {\n        x: (colIndex + 0.5) * boxSize + padding,\n        y: (rowIndex + 0.5) * boxSize + padding,\n        fontSize: \"40\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fill: playerColors[player],\n        children: \"X\"\n      }, `box-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }, this) : null))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"US4iDswePvqfV5J4yfW0hw2WWIg=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GameBoard","_s","gridSize","boxSize","padding","currentPlayer","setCurrentPlayer","playerScores","setPlayerScores","playerColors","lines","setLines","vertical","Array","fill","map","horizontal","completedBoxes","setCompletedBoxes","handleClick","type","row","col","newLines","completedBoxesAfterMove","checkCompletedBoxes","newCompletedBoxes","boxesCompletedThisTurn","topLine","bottomLine","leftLine","rightLine","style","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","border","from","length","_","cx","cy","r","rowIndex","color","colIndex","x1","y1","x2","y2","stroke","strokeWidth","onMouseEnter","e","target","setAttribute","onMouseLeave","onClick","player","x","y","fontSize","textAnchor","dominantBaseline","_c","$RefreshReg$"],"sources":["/Users/sophiacastiglione/Desktop/iste442/dotsandboxes/client/src/components/gameboard.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nconst GameBoard = () => {\n    const gridSize = 5;\n    const boxSize = 100;\n    const padding = 20;\n\n    const [currentPlayer, setCurrentPlayer] = useState(1); // 1 or 2\n    const [playerScores, setPlayerScores] = useState({ 1: 0, 2: 0 });\n\n    const playerColors = { 1: \"blue\", 2: \"green\" };\n\n    const [lines, setLines] = useState({\n        vertical: Array(gridSize).fill(null).map(() => Array(gridSize + 1).fill(null)),\n        horizontal: Array(gridSize + 1).fill(null).map(() => Array(gridSize).fill(null)),\n    });\n\n    const [completedBoxes, setCompletedBoxes] = useState(\n        Array(gridSize - 1).fill(null).map(() => Array(gridSize - 1).fill(null))\n    );\n\n    const handleClick = (type, row, col) => {\n        const newLines = {\n            vertical: lines.vertical.map(row => [...row]),\n            horizontal: lines.horizontal.map(row => [...row]),\n        };\n\n        // assign color\n        newLines[type][row][col] = playerColors[currentPlayer];\n\n        setLines(newLines);\n        const completedBoxesAfterMove = checkCompletedBoxes(newLines);\n\n        // change turn if no box is completed after move\n        if (!completedBoxesAfterMove) {\n            setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n        }\n    };\n\n    const checkCompletedBoxes = (newLines) => {\n        const newCompletedBoxes = completedBoxes.map(row => [...row]);\n        let boxesCompletedThisTurn = 0;\n\n        for (let row = 0; row < gridSize - 1; row++) {\n            for (let col = 0; col < gridSize - 1; col++) {\n                // check if all four sides of the box are filled\n                const topLine = newLines.horizontal[row][col];\n                const bottomLine = newLines.horizontal[row + 1][col];\n                const leftLine = newLines.vertical[row][col];\n                const rightLine = newLines.vertical[row][col + 1];\n    \n                if (topLine && bottomLine && leftLine && rightLine && !newCompletedBoxes[row][col]) {\n                    newCompletedBoxes[row][col] = currentPlayer; // mark box with current player number\n                    boxesCompletedThisTurn++;\n                }\n            }\n        }\n\n        setCompletedBoxes(newCompletedBoxes);\n\n        // increment the score of the current player if needed\n        if (boxesCompletedThisTurn > 0) {\n            setPlayerScores({\n                ...playerScores,\n                [currentPlayer]: playerScores[currentPlayer] + boxesCompletedThisTurn\n            });\n            return true; // return true if any box was completed\n        }\n\n        return false;\n    };\n\n    return (\n        <div style={{padding}}>\n            <h2>{`Player ${currentPlayer}'s Turn`}</h2>\n            <h3>{`Player 1: ${playerScores[1]} | Player 2: ${playerScores[2]}`}</h3>\n\n            <svg width={gridSize * boxSize + 2 * padding} height={gridSize * boxSize + 2 * padding} style={{border: \"1px solid black\"}}>\n                {/* dots */}\n                {Array.from({length: gridSize + 1}).map((_, row) =>\n                    Array.from({length: gridSize + 1}).map((_, col) => (\n                        <circle \n                            key={`dot-${row}-${col}`}\n                            cx={col * boxSize + padding}\n                            cy={row * boxSize + padding}\n                            r=\"3\"\n                            fill=\"black\"\n                        />\n                    ))\n                )}\n\n                {/* horizontal lines */}\n                {lines.horizontal.map((row, rowIndex) =>\n                    row.map((color, colIndex) => (\n                        <line\n                            key={`hline-${rowIndex}-${colIndex}`}\n                            x1={colIndex * boxSize + padding}\n                            y1={rowIndex * boxSize + padding}\n                            x2={(colIndex + 1) * boxSize + padding}\n                            y2={rowIndex * boxSize + padding}\n                            stroke={color || \"transparent\"}\n                            strokeWidth=\"5\"\n                            onMouseEnter={(e) => e.target.setAttribute(\"stroke\", \"gray\")}\n                            onMouseLeave={(e) => e.target.setAttribute(\"stroke\", color || \"transparent\")}\n                            onClick={() => handleClick(\"horizontal\", rowIndex, colIndex)}\n                        />\n                    ))\n                )}\n\n                {/* vertical lines */}\n                {lines.vertical.map((row, rowIndex) =>\n                    row.map((color, colIndex) => (\n                        <line \n                            key={`vline-${rowIndex}-${colIndex}`}\n                            x1={colIndex * boxSize + padding}\n                            y1={rowIndex * boxSize + padding}\n                            x2={colIndex * boxSize + padding}\n                            y2={(rowIndex + 1) * boxSize + padding}\n                            stroke={color || \"transparent\"}\n                            strokeWidth=\"5\"\n                            onMouseEnter={(e) => e.target.setAttribute(\"stroke\", \"gray\")}\n                            onMouseLeave={(e) => e.target.setAttribute(\"stroke\", color || \"transparent\")}\n                            onClick={() => handleClick(\"vertical\", rowIndex, colIndex)}\n                        />\n                    ))\n                )}\n\n                {/* boxes */}\n                {completedBoxes.map((row, rowIndex) =>\n                    row.map((player, colIndex) =>\n                        player ? (\n                            <text\n                                key={`box-${rowIndex}-${colIndex}`}\n                                x={(colIndex + 0.5) * boxSize + padding}\n                                y={(rowIndex + 0.5) * boxSize + padding}\n                                fontSize=\"40\"\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                                fill={playerColors[player]}\n                            >\n                                X\n                            </text>\n                        ) : null\n                    )\n                )}\n            </svg>\n        </div>\n    );\n};\n\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}