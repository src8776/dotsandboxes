{"ast":null,"code":"var _jsxFileName = \"/Users/sophiacastiglione/Desktop/iste442/dots-and-boxes/client/src/components/gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const gridSize = 5;\n  const [lines, setLines] = useState({\n    vertical: Array(gridSize - 1).fill(Array(gridSize).fill(false)),\n    horizontal: Array(gridSize).fill(Array(gridSize - 1).fill(false))\n  });\n  const handleClick = (type, row, col) => {\n    const newLines = {\n      ...lines\n    };\n\n    // mark line on click\n    if (type === \"verticle\") {\n      newLines.vertical[row][col] = !newLines.vertical[row][col];\n    } else {\n      newLines.horizontal[row][col] = !newLines.horizontal[row][col];\n    }\n    setLines(newLines);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: gridSize * 100,\n      height: gridSize * 100,\n      children: [Array.from({\n        length: gridSize + 1\n      }).map((_, row) => Array.from({\n        length: gridSize + 1\n      }).map((_, col) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: col * 100,\n        cy: row * 100,\n        r: \"3\",\n        fill: \"black\"\n      }, `dot-${row}-${col}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this))), lines.horizontal.map((row, rowIndex) => row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: colIndex * 100,\n        y1: rowIndex * 100 + 50,\n        x2: (colIndex + 1) * 100,\n        y2: rowIndex * 100 + 50,\n        stroke: isClicked ? \"blue\" : \"transparent\",\n        strokeWidth: \"5\",\n        onMouseEnter: e => e.target.setAttribute(\"stroke\", \"gray\"),\n        onMouseLeave: e => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\"),\n        onClick: () => handleClick(\"horizontal\", rowIndex, colIndex)\n      }, `hline-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this))), lines.vertical.map((row, rowIndex) => row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: colIndex * 100 + 50,\n        y1: rowIndex * 100,\n        x2: colIndex * 100 + 50,\n        y2: (rowIndex + 1) * 100,\n        stroke: isClicked ? \"blue\" : \"transparent\",\n        strokeWidth: \"5\",\n        onMouseEnter: e => e.target.setAttribute(\"stroke\", \"gray\"),\n        onMouseLeave: e => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\"),\n        onClick: () => handleClick(\"verticle\", rowIndex, colIndex)\n      }, `vline-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }, this)))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"PwmE00fIWu6wAt9kyS+RkuhoZgE=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GameBoard","_s","gridSize","lines","setLines","vertical","Array","fill","horizontal","handleClick","type","row","col","newLines","children","width","height","from","length","map","_","cx","cy","r","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","isClicked","colIndex","x1","y1","x2","y2","stroke","strokeWidth","onMouseEnter","e","target","setAttribute","onMouseLeave","onClick","_c","$RefreshReg$"],"sources":["/Users/sophiacastiglione/Desktop/iste442/dots-and-boxes/client/src/components/gameboard.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nconst GameBoard = () => {\n    const gridSize = 5;\n    const [lines, setLines] = useState({\n        vertical: Array(gridSize - 1).fill(Array(gridSize).fill(false)),\n        horizontal: Array(gridSize).fill(Array(gridSize - 1).fill(false))\n    });\n\n    const handleClick = (type, row, col) => {\n        const newLines = {...lines};\n\n        // mark line on click\n        if (type === \"verticle\") {\n            newLines.vertical[row][col] = !newLines.vertical[row][col];\n        } else {\n            newLines.horizontal[row][col] = !newLines.horizontal[row][col];\n        }\n\n        setLines(newLines);\n    };\n\n    return (\n        <div>\n            <svg width={gridSize * 100} height={gridSize * 100}>\n                {/* dots */}\n                {Array.from({length: gridSize + 1}).map((_, row) =>\n                    Array.from({length: gridSize + 1}).map((_, col) => (\n                        <circle \n                            key={`dot-${row}-${col}`}\n                            cx={col * 100}\n                            cy={row * 100}\n                            r=\"3\"\n                            fill=\"black\"\n                        />\n                    ))\n                )}\n\n                {/* horizontal lines */}\n                {lines.horizontal.map((row, rowIndex) =>\n                    row.map((isClicked, colIndex) => (\n                        <line\n                            key={`hline-${rowIndex}-${colIndex}`}\n                            x1={colIndex * 100}\n                            y1={rowIndex * 100 + 50}\n                            x2={(colIndex + 1) * 100}\n                            y2={rowIndex * 100 + 50}\n                            stroke={isClicked ? \"blue\" : \"transparent\"}\n                            strokeWidth=\"5\"\n                            onMouseEnter={(e) => e.target.setAttribute(\"stroke\", \"gray\")}\n                            onMouseLeave={(e) => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\")}\n                            onClick={() => handleClick(\"horizontal\", rowIndex, colIndex)}\n                        />\n                    ))\n                )}\n\n                {/* vertical lines */}\n                {lines.vertical.map((row, rowIndex) =>\n                    row.map((isClicked, colIndex) => (\n                        <line \n                            key={`vline-${rowIndex}-${colIndex}`}\n                            x1={colIndex * 100 + 50}\n                            y1={rowIndex * 100}\n                            x2={colIndex * 100 + 50}\n                            y2={(rowIndex + 1) * 100}\n                            stroke={isClicked ? \"blue\" : \"transparent\"}\n                            strokeWidth=\"5\"\n                            onMouseEnter={(e) => e.target.setAttribute(\"stroke\", \"gray\")}\n                            onMouseLeave={(e) => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\")}\n                            onClick={() => handleClick(\"verticle\", rowIndex, colIndex)}\n                        />\n                    ))\n                )}\n            </svg>\n        </div>\n    );\n};\n\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}