{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useWebSocket = (url, username) => {\n  _s();\n  const [ws, setWs] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState('lobby');\n  useEffect(() => {\n    const socket = new WebSocket(url);\n    socket.onopen = () => {\n      console.log('WebSocket connected');\n      socket.send(JSON.stringify({\n        type: 'setUsername',\n        username\n      }));\n    };\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'playerList') {\n        setPlayers(data.players);\n      } else if (data.type === 'chatMessage' && data.room === currentRoom) {\n        // update messages only if the message is for the current room\n        setMessages(prevMessages => [...prevMessages, `${data.username}: ${data.message}`]);\n      }\n    };\n    socket.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n    setWs(socket);\n    return () => {\n      socket.close();\n    };\n  }, [url, username, currentRoom]);\n  const sendMessage = message => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      const messageData = {\n        type: 'chatMessage',\n        room: currentRoom,\n        message: message,\n        username: username\n      };\n      ws.send(JSON.stringify(messageData));\n    }\n  };\n  const sendChallenge = challengedPlayer => {\n    sendMessage({\n      type: 'challenge',\n      challengedPlayer\n    });\n  };\n  const respondToChallenge = (response, challenger) => {\n    sendMessage({\n      type: 'challengeResponse',\n      response,\n      challenger\n    });\n  };\n  return {\n    players,\n    messages,\n    sendMessage,\n    sendChallenge,\n    respondToChallenge,\n    setCurrentRoom\n  };\n};\n_s(useWebSocket, \"6jCmmxX8A+KDLT7zqO5Rgf5gRQ8=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useState","useWebSocket","url","username","_s","ws","setWs","players","setPlayers","messages","setMessages","currentRoom","setCurrentRoom","socket","WebSocket","onopen","console","log","send","JSON","stringify","type","onmessage","event","data","parse","room","prevMessages","message","onclose","close","sendMessage","readyState","OPEN","messageData","sendChallenge","challengedPlayer","respondToChallenge","response","challenger"],"sources":["/Users/sophiacastiglione/Desktop/iste442/dots-and-boxes/client/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useWebSocket = (url, username) => {\n    const [ws, setWs] = useState(null);\n    const [players, setPlayers] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [currentRoom, setCurrentRoom] = useState('lobby'); \n\n    useEffect(() => {\n        const socket = new WebSocket(url);\n\n        socket.onopen = () => {\n            console.log('WebSocket connected');\n            socket.send(JSON.stringify({ type: 'setUsername', username }));\n        };\n\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            if (data.type === 'playerList') {\n                setPlayers(data.players);\n            } else if (data.type === 'chatMessage' && data.room === currentRoom) {\n                // update messages only if the message is for the current room\n                setMessages((prevMessages) => [...prevMessages, `${data.username}: ${data.message}`]);\n            }\n        };\n\n        socket.onclose = () => {\n            console.log('WebSocket disconnected');\n        };\n\n        setWs(socket);\n\n        return () => {\n            socket.close();\n        };\n    }, [url, username, currentRoom]);\n\n    const sendMessage = (message) => {\n        if (ws && ws.readyState === WebSocket.OPEN) {\n            const messageData = {\n                type: 'chatMessage',\n                room: currentRoom, \n                message: message,\n                username: username\n            };\n            ws.send(JSON.stringify(messageData)); \n        }\n    };\n\n    const sendChallenge = (challengedPlayer) => {\n        sendMessage({ type: 'challenge', challengedPlayer });\n    };\n\n    const respondToChallenge = (response, challenger) => {\n        sendMessage({ type: 'challengeResponse', response, challenger });\n    };\n\n    return { players, messages, sendMessage, sendChallenge, respondToChallenge, setCurrentRoom };\n};\n\nexport default useWebSocket;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,QAAQ,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAClC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACZ,MAAMc,MAAM,GAAG,IAAIC,SAAS,CAACZ,GAAG,CAAC;IAEjCW,MAAM,CAACE,MAAM,GAAG,MAAM;MAClBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCJ,MAAM,CAACK,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAE,aAAa;QAAElB;MAAS,CAAC,CAAC,CAAC;IAClE,CAAC;IAEDU,MAAM,CAACS,SAAS,GAAIC,KAAK,IAAK;MAC1B,MAAMC,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;MACnC,IAAIA,IAAI,CAACH,IAAI,KAAK,YAAY,EAAE;QAC5Bb,UAAU,CAACgB,IAAI,CAACjB,OAAO,CAAC;MAC5B,CAAC,MAAM,IAAIiB,IAAI,CAACH,IAAI,KAAK,aAAa,IAAIG,IAAI,CAACE,IAAI,KAAKf,WAAW,EAAE;QACjE;QACAD,WAAW,CAAEiB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE,GAAGH,IAAI,CAACrB,QAAQ,KAAKqB,IAAI,CAACI,OAAO,EAAE,CAAC,CAAC;MACzF;IACJ,CAAC;IAEDf,MAAM,CAACgB,OAAO,GAAG,MAAM;MACnBb,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACzC,CAAC;IAEDX,KAAK,CAACO,MAAM,CAAC;IAEb,OAAO,MAAM;MACTA,MAAM,CAACiB,KAAK,CAAC,CAAC;IAClB,CAAC;EACL,CAAC,EAAE,CAAC5B,GAAG,EAAEC,QAAQ,EAAEQ,WAAW,CAAC,CAAC;EAEhC,MAAMoB,WAAW,GAAIH,OAAO,IAAK;IAC7B,IAAIvB,EAAE,IAAIA,EAAE,CAAC2B,UAAU,KAAKlB,SAAS,CAACmB,IAAI,EAAE;MACxC,MAAMC,WAAW,GAAG;QAChBb,IAAI,EAAE,aAAa;QACnBK,IAAI,EAAEf,WAAW;QACjBiB,OAAO,EAAEA,OAAO;QAChBzB,QAAQ,EAAEA;MACd,CAAC;MACDE,EAAE,CAACa,IAAI,CAACC,IAAI,CAACC,SAAS,CAACc,WAAW,CAAC,CAAC;IACxC;EACJ,CAAC;EAED,MAAMC,aAAa,GAAIC,gBAAgB,IAAK;IACxCL,WAAW,CAAC;MAAEV,IAAI,EAAE,WAAW;MAAEe;IAAiB,CAAC,CAAC;EACxD,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACC,QAAQ,EAAEC,UAAU,KAAK;IACjDR,WAAW,CAAC;MAAEV,IAAI,EAAE,mBAAmB;MAAEiB,QAAQ;MAAEC;IAAW,CAAC,CAAC;EACpE,CAAC;EAED,OAAO;IAAEhC,OAAO;IAAEE,QAAQ;IAAEsB,WAAW;IAAEI,aAAa;IAAEE,kBAAkB;IAAEzB;EAAe,CAAC;AAChG,CAAC;AAACR,EAAA,CAxDIH,YAAY;AA0DlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}