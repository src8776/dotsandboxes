{"ast":null,"code":"var _jsxFileName = \"/Users/sophiacastiglione/Desktop/iste442/dots-and-boxes/client/src/components/gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const gridSize = 5;\n  const boxSize = 100;\n  const padding = 20;\n  const [lines, setLines] = useState({\n    vertical: Array(gridSize).fill(Array(gridSize + 1).fill(false)),\n    horizontal: Array(gridSize + 1).fill(Array(gridSize).fill(false))\n  });\n  const [completedBoxes, setCompletedBoxes] = useState(Array(gridSize - 1).fill(null).map(() => Array(gridSize - 1).fill(false)));\n  const handleClick = (type, row, col) => {\n    const newLines = {\n      ...lines\n    };\n\n    // mark line on click\n    if (type === \"vertical\") {\n      newLines.vertical[row] = [...newLines.vertical[row]];\n      newLines.vertical[row][col] = !newLines.vertical[row][col];\n    } else {\n      newLines.horizontal[row] = [...newLines.horizontal[row]]; // Copy the row of horizontal lines\n      newLines.horizontal[row][col] = !newLines.horizontal[row][col];\n    }\n    setLines(newLines);\n    checkCompletedBoxes(newLines);\n  };\n  const checkCompletedBoxes = newLines => {\n    const newCompletedBoxes = [...completedBoxes];\n    for (let row = 0; row < gridSize - 1; row++) {\n      for (let col = 0; col < gridSize - 1; col++) {\n        const isComplete = newLines.horizontal[row][col] && newLines.horizontal[row + 1][col] && newLines.vertical[row][col] && newLines.vertical[row][col + 1];\n        newCompletedBoxes[row][col] = isComplete;\n      }\n    }\n    setCompletedBoxes(newCompletedBoxes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: gridSize * boxSize + 2 * padding,\n      height: gridSize * boxSize + 2 * padding,\n      style: {\n        border: \"1px solid black\"\n      },\n      children: [Array.from({\n        length: gridSize + 1\n      }).map((_, row) => Array.from({\n        length: gridSize + 1\n      }).map((_, col) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: col * boxSize + padding,\n        cy: row * boxSize + padding,\n        r: \"3\",\n        fill: \"black\"\n      }, `dot-${row}-${col}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this))), lines.horizontal.map((row, rowIndex) => row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: colIndex * boxSize + padding,\n        y1: rowIndex * boxSize + padding,\n        x2: (colIndex + 1) * boxSize + padding,\n        y2: rowIndex * boxSize + padding,\n        stroke: isClicked ? \"blue\" : \"transparent\",\n        strokeWidth: \"5\",\n        onMouseEnter: e => e.target.setAttribute(\"stroke\", \"gray\"),\n        onMouseLeave: e => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\"),\n        onClick: () => handleClick(\"horizontal\", rowIndex, colIndex)\n      }, `hline-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this))), lines.vertical.map((row, rowIndex) => row.map((isClicked, colIndex) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: colIndex * boxSize + padding,\n        y1: rowIndex * boxSize + padding,\n        x2: colIndex * boxSize + padding,\n        y2: (rowIndex + 1) * boxSize + padding,\n        stroke: isClicked ? \"blue\" : \"transparent\",\n        strokeWidth: \"5\",\n        onMouseEnter: e => e.target.setAttribute(\"stroke\", \"gray\"),\n        onMouseLeave: e => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\"),\n        onClick: () => handleClick(\"vertical\", rowIndex, colIndex)\n      }, `vline-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this))), completedBoxes.map((row, rowIndex) => row.map((isCompleted, colIndex) => isCompleted ? /*#__PURE__*/_jsxDEV(\"text\", {\n        x: (colIndex + 0.5) * boxSize + padding,\n        y: (rowIndex + 0.5) * boxSize + padding,\n        fontSize: \"40\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fill: \"blue\",\n        children: \"X\"\n      }, `box-${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }, this) : null))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(GameBoard, \"OJMAURBJbdF/f5LCvwID+lA1UEI=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GameBoard","_s","gridSize","boxSize","padding","lines","setLines","vertical","Array","fill","horizontal","completedBoxes","setCompletedBoxes","map","handleClick","type","row","col","newLines","checkCompletedBoxes","newCompletedBoxes","isComplete","style","children","width","height","border","from","length","_","cx","cy","r","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","isClicked","colIndex","x1","y1","x2","y2","stroke","strokeWidth","onMouseEnter","e","target","setAttribute","onMouseLeave","onClick","isCompleted","x","y","fontSize","textAnchor","dominantBaseline","_c","$RefreshReg$"],"sources":["/Users/sophiacastiglione/Desktop/iste442/dots-and-boxes/client/src/components/gameboard.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nconst GameBoard = () => {\n    const gridSize = 5;\n    const boxSize = 100;\n    const padding = 20;\n\n    const [lines, setLines] = useState({\n        vertical: Array(gridSize).fill(Array(gridSize + 1).fill(false)),\n        horizontal: Array(gridSize + 1).fill(Array(gridSize).fill(false))\n    });\n\n    const [completedBoxes, setCompletedBoxes] = useState(\n        Array(gridSize - 1)\n            .fill(null)\n            .map(() => Array(gridSize - 1).fill(false))\n    );\n\n    const handleClick = (type, row, col) => {\n        const newLines = {...lines};\n\n        // mark line on click\n        if (type === \"vertical\") {\n            newLines.vertical[row] = [...newLines.vertical[row]];\n            newLines.vertical[row][col] = !newLines.vertical[row][col];\n        } else {\n            newLines.horizontal[row] = [...newLines.horizontal[row]]; // Copy the row of horizontal lines\n            newLines.horizontal[row][col] = !newLines.horizontal[row][col];\n        }\n\n        setLines(newLines);\n        checkCompletedBoxes(newLines);\n    };\n\n    const checkCompletedBoxes = (newLines) => {\n        const newCompletedBoxes = [...completedBoxes];\n\n        for (let row = 0; row < gridSize - 1; row++) {\n            for (let col = 0; col < gridSize - 1; col++) {\n                const isComplete =\n                    newLines.horizontal[row][col] &&\n                    newLines.horizontal[row + 1][col] &&\n                    newLines.vertical[row][col] &&\n                    newLines.vertical[row][col + 1];\n    \n                newCompletedBoxes[row][col] = isComplete;\n            }\n        }\n\n        setCompletedBoxes(newCompletedBoxes);\n    };\n\n    return (\n        <div style={{padding}}>\n            <svg width={gridSize * boxSize + 2 * padding} height={gridSize * boxSize + 2 * padding} style={{border: \"1px solid black\"}}>\n                {/* dots */}\n                {Array.from({length: gridSize + 1}).map((_, row) =>\n                    Array.from({length: gridSize + 1}).map((_, col) => (\n                        <circle \n                            key={`dot-${row}-${col}`}\n                            cx={col * boxSize + padding}\n                            cy={row * boxSize + padding}\n                            r=\"3\"\n                            fill=\"black\"\n                        />\n                    ))\n                )}\n\n                {/* horizontal lines */}\n                {lines.horizontal.map((row, rowIndex) =>\n                    row.map((isClicked, colIndex) => (\n                        <line\n                            key={`hline-${rowIndex}-${colIndex}`}\n                            x1={colIndex * boxSize + padding}\n                            y1={rowIndex * boxSize + padding}\n                            x2={(colIndex + 1) * boxSize + padding}\n                            y2={rowIndex * boxSize + padding}\n                            stroke={isClicked ? \"blue\" : \"transparent\"}\n                            strokeWidth=\"5\"\n                            onMouseEnter={(e) => e.target.setAttribute(\"stroke\", \"gray\")}\n                            onMouseLeave={(e) => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\")}\n                            onClick={() => handleClick(\"horizontal\", rowIndex, colIndex)}\n                        />\n                    ))\n                )}\n\n                {/* vertical lines */}\n                {lines.vertical.map((row, rowIndex) =>\n                    row.map((isClicked, colIndex) => (\n                        <line \n                            key={`vline-${rowIndex}-${colIndex}`}\n                            x1={colIndex * boxSize + padding}\n                            y1={rowIndex * boxSize + padding}\n                            x2={colIndex * boxSize + padding}\n                            y2={(rowIndex + 1) * boxSize + padding}\n                            stroke={isClicked ? \"blue\" : \"transparent\"}\n                            strokeWidth=\"5\"\n                            onMouseEnter={(e) => e.target.setAttribute(\"stroke\", \"gray\")}\n                            onMouseLeave={(e) => e.target.setAttribute(\"stroke\", isClicked ? \"blue\" : \"transparent\")}\n                            onClick={() => handleClick(\"vertical\", rowIndex, colIndex)}\n                        />\n                    ))\n                )}\n\n                {/* boxes */}\n                {completedBoxes.map((row, rowIndex) =>\n                    row.map((isCompleted, colIndex) =>\n                        isCompleted ? (\n                            <text\n                                key={`box-${rowIndex}-${colIndex}`}\n                                x={(colIndex + 0.5) * boxSize + padding}\n                                y={(rowIndex + 0.5) * boxSize + padding}\n                                fontSize=\"40\"\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                                fill=\"blue\"\n                            >\n                                X\n                            </text>\n                        ) : null\n                    )\n                )}\n            </svg>\n        </div>\n    );\n};\n\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}